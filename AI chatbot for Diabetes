{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMzxtRyDTn5EN76FVKFiIO4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nehal-moiz/NEHAL_MOIZ/blob/main/AI%20chatbot%20for%20Diabetes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "aI3rZUPFVPNl",
        "outputId": "e85e8cf2-6203-4288-e3dc-66977849a621"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-aed36103-82ca-44eb-817a-281fb6c2dd8c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-aed36103-82ca-44eb-817a-281fb6c2dd8c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving diabetes.csv to diabetes.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import google.generativeai as genai\n",
        "from cachetools import TTLCache\n",
        "\n",
        "# Configure API key\n",
        "genai.configure(api_key=\"AIzaSyA9gSXpTEQ768TmksutF1KCIeVhYqNSCjk\")\n",
        "\n",
        "# Read dataset\n",
        "diabetes_data = pd.read_csv('diabetes.csv')\n",
        "\n",
        "\n",
        "diabetes_text = diabetes_data.astype(str).apply(' '.join, axis=1)\n",
        "\n",
        "\n",
        "chat_model = genai.GenerativeModel('gemini-pro')\n",
        "chat = chat_model.start_chat(history=[])\n",
        "\n",
        "\n",
        "cache = TTLCache(maxsize=100, ttl=600)  # Cache up to 100 items for 600 seconds\n",
        "\n",
        "\n",
        "print(\"Chatbot: Hello! I'm here to provide information about diabetes. What would you like to know? You can ask me questions or type 'exit' to end the conversation.\")\n",
        "\n",
        "\n",
        "while True:\n",
        "    user_input = input(\"You: \")\n",
        "\n",
        "    if user_input.lower() == 'exit':\n",
        "        print(\"Chatbot: Goodbye! Take care.\")\n",
        "        break\n",
        "\n",
        "    if user_input in cache:\n",
        "        response_text = cache[user_input]\n",
        "        print(\"Chatbot:\", response_text)\n",
        "    else:\n",
        "        response = chat.send_message(user_input)\n",
        "        cache[user_input] = response.text\n",
        "        print(\"Chatbot:\", response.text)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "AKV0nt8DWqfW",
        "outputId": "16af1dbe-b09f-4931-f841-c367512d53cc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chatbot: Hello! I'm here to provide information about diabetes. What would you like to know? You can ask me questions or type 'exit' to end the conversation.\n",
            "You: How does diabetes affect thyroid function\n",
            "Chatbot: Diabetes can affect thyroid function in several ways:\n",
            "\n",
            "**1. Hypothyroidism (Underactive Thyroid):**\n",
            "\n",
            "* Diabetes can lead to the development of hypothyroidism, where the thyroid gland produces insufficient thyroid hormone.\n",
            "* People with diabetes are more likely to have autoimmune thyroiditis, a condition where the immune system attacks the thyroid gland, reducing hormone production.\n",
            "\n",
            "**2. Hyperthyroidism (Overactive Thyroid):**\n",
            "\n",
            "* Diabetes can also contribute to hyperthyroidism, although it is less common.\n",
            "* High blood sugar levels can stimulate the release of thyroid hormone, leading to an overactive thyroid gland.\n",
            "\n",
            "**3. Goiter:**\n",
            "\n",
            "* Diabetes can sometimes cause a goiter, an enlargement of the thyroid gland.\n",
            "* Goiters are more common in people with type 2 diabetes and can result from autoimmune thyroiditis or other thyroid disorders associated with diabetes.\n",
            "\n",
            "**4. Thyroid Hormone Resistance:**\n",
            "\n",
            "* Diabetes can decrease the body's response to thyroid hormone, a condition known as thyroid hormone resistance.\n",
            "* This can lead to hypothyroid symptoms despite normal thyroid hormone levels.\n",
            "\n",
            "**5. Diabetes Medications:**\n",
            "\n",
            "* Certain medications used to treat diabetes, such as metformin, can interfere with thyroid function and increase the risk of hypothyroidism.\n",
            "\n",
            "**Consequences of Altered Thyroid Function in Diabetes:**\n",
            "\n",
            "* **Hypothyroidism:** Reduced thyroid hormone levels can worsen glycemic control, leading to elevated blood sugar levels.\n",
            "* **Hyperthyroidism:** Excess thyroid hormone can accelerate glucose metabolism and increase insulin sensitivity, reducing blood sugar levels.\n",
            "* **Goiter:** An enlarged thyroid gland can interfere with breathing or swallowing.\n",
            "* **Thyroid Hormone Resistance:** This can lead to persistent hypothyroidism, despite treatment with thyroid replacement therapy.\n",
            "\n",
            "**Recommendations:**\n",
            "\n",
            "* People with diabetes should be regularly screened for thyroid function.\n",
            "* Close monitoring is important to detect and manage thyroid disorders promptly.\n",
            "* If thyroid disease is suspected, further diagnostic tests may be necessary.\n",
            "* Appropriate treatment can help prevent or mitigate the negative effects of thyroid dysfunction on blood sugar control and overall health.\n",
            "You: exit\n",
            "Chatbot: Goodbye! Take care.\n"
          ]
        }
      ]
    }
  ]
}